{"version":3,"sources":["store/reducers/systemReducer.js","store/reducers/cityReducer.js","store/reducers/themeReducer.js","store/reducers/temperatureScaleReducer.js","store/reducers/index.js","store/store.js","services/storageService.js","services/cityService.js","store/actions/cityActions.js","services/weatherService.js","cmps/buttons/HeartBtnIcon.jsx","cmps/CityDataPreview.jsx","cmps/Search.jsx","cmps/TemperaturePreview.jsx","utils/getWeatherIcons.js","cmps/weather-details-cmps/WeatherCardPreview.jsx","cmps/buttons/FavoriteBtn.jsx","utils/getCurrentDate.js","cmps/weather-details-cmps/ForecastPreview.jsx","cmps/weather-details-cmps/ForecastList.jsx","store/actions/temperatureScaleActions.js","cmps/buttons/TemperatureConversionBtn.jsx","cmps/Loader.jsx","cmps/weather-details-cmps/Location.jsx","cmps/weather-details-cmps/TemperatureParam.jsx","cmps/CircularProgressBar.jsx","cmps/weather-details-cmps/TemperatureParamDesktop.jsx","utils/formatAMPM.js","cmps/weather-details-cmps/HourlyForecast.jsx","services/themeService.js","cmps/FavoritePreview.jsx","cmps/FavoriteList.jsx","routes.js","pages/FavoriteCitys.jsx","pages/WeatherDetails.jsx","store/actions/themeActions.js","store/actions/systemActions.js","cmps/buttons/ThemeToggleBtn.jsx","cmps/buttons/NavbarDesktopBtn.jsx","cmps/Navbar.jsx","cmps/MobileNavbar.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["initialState","isLoading","favoriteCitys","currCity","themeState","temperatureScale","rootReducer","combineReducers","system","state","action","type","city","citys","theme","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","gCitys","storageService","loadFromStorage","key","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","KEY","cityService","query","getById","cityId","find","_city","_id","Promise","resolve","save","filter","toast","success","name","position","POSITION","BOTTOM_LEFT","newCity","_makeid","_add","a","length","text","possible","i","charAt","Math","floor","random","updateFavoriteCitys","dispatch","error","console","log","updateCurrCity","err","API_KEY","weatherService","getAutoComplete","fetch","getCurrentCityConditions","getForecastFromCity","getCurrLocation","getHourlyFrecast","cityKey","status","res","HeartBtnIcon","isActive","size","className","CityDataPreview","cityData","getCurrentStyle","onGetCityDetails","onToggleLocation","setCitysData","inputRef","useSelector","useState","setisActive","useEffect","isIncludsCity","Key","onClick","current","value","LocalizedName","Country","e","Search","citysData","useDispatch","history","useHistory","useRef","ev","target","then","data","json","autoCompleteData","country","preventDefault","stopPropagation","push","ref","onChange","placeholder","onKeyDown","match","map","idx","Temperature","celsius","currentTextSize","round","getWeatherIcon","weatherIcon","getParamImg","paramName","includes","WeatherCardPreview","currentCityData","weatherText","temperature","realFeelTemperature","getWeatherIconSize","src","alt","srcSet","FavoriteBtn","HeartButtonText","getForecastDate","day","d","Date","date","getDate","monthName","getMonth","getForecastDayNameShort","getDay","ForecastPreview","dailyForecast","Day","Icon","ShortPhrase","Maximum","Value","Minimum","AirAndPollen","WindGust","Speed","RealFeelTemperature","TotalLiquid","ForecastList","dailyForecastsData","updateTemperatureScale","TemperatureConversionBtn","checked","Loader","Location","months","monthIndex","dayName","formatDate","TemperatureParam","param","unit","CircularProgressBar","getParamValue","txt","TemperatureParamDesktop","temperatureParams","formatAMPM","hours","getHours","minutes","getMinutes","ampm","gThemeState","HourlyForecast","hourlyForecastData","hourDate","DateTime","WeatherIcon","IconPhrase","FavoritePreview","setCityData","isOpen","setIsOpen","modalRef","response","currData","Metric","WeatherText","UVIndex","RelativeHumidity","fetchCurrentCityConditions","focus","p","tabIndex","onBlur","onRemoveLocation","FavoriteList","routes","path","component","setCurrentCityData","setDailyForecastsData","setHourlyForecatsData","location","useLocation","UVIndexText","PrecipitationSummary","Precipitation","Unit","DailyForecasts","fetchDailyForecast","fetchHourlyForecast","pathname","themeService","newThemeState","loadTheme","ThemeToggleBtn","updateTheme","NavbarDesktopBtn","innerText","pathName","to","Navbar","offset","setOffset","onscroll","pageYOffset","MobileNavbar","App","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","fetchCurrentLocation","parseInt","getLocation","getDefaultCity","defaultCity","route","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b43f4073.chunk.js","sourcesContent":["const initialState = {\r\n  isLoading: false\r\n};\r\n\r\nexport function systemReducer (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false };\r\n    default: return state;\r\n  }\r\n}\r\n","const initialState = {\r\n    favoriteCitys: [],\r\n    currCity:null\r\n}\r\n\r\nexport function cityReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_FAVORITE_CITYS':\r\n            return {\r\n                ...state,\r\n                favoriteCitys: action.citys\r\n            }\r\n        case 'SET_CURRENT_CITY':\r\n            return {\r\n                ...state,\r\n                currCity: action.city\r\n            } \r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {\r\n    themeState: false\r\n}\r\n\r\nexport function themeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_THEME':\r\n            return {\r\n                ...state,\r\n                themeState: action.themeState\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {\r\n    temperatureScale: 'celsius'\r\n}\r\n\r\nexport function temperatureScaleReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_SCALE':\r\n            return {\r\n                ...state,\r\n                temperatureScale: action.temperatureScale\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport {systemReducer} from './systemReducer';\r\nimport { cityReducer } from './cityReducer';\r\nimport { themeReducer } from './themeReducer';\r\nimport { temperatureScaleReducer } from './temperatureScaleReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  system: systemReducer,\r\n  city: cityReducer,\r\n  theme: themeReducer,\r\n  temperatureScale: temperatureScaleReducer,\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index.js';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import { storageService } from \"./storageService\"\r\nimport { toast } from 'react-toastify';\r\n\r\nconst KEY = 'CITYS';\r\nlet gCitys;\r\n\r\nexport const cityService = {\r\n    query,\r\n    getById,\r\n    save\r\n}\r\n\r\n\r\nasync function query() {\r\n    gCitys = await storageService.loadFromStorage(KEY)\r\n    if(!gCitys){\r\n        gCitys = []\r\n        storageService.saveToStorage(KEY, gCitys)\r\n    }\r\n    return gCitys\r\n}\r\n\r\n\r\nfunction getById(cityId) {\r\n    if(gCitys){\r\n        const city = gCitys.find(_city => _city._id === cityId)\r\n        return Promise.resolve(city)\r\n    }\r\n}\r\n\r\n\r\nfunction save(city) {\r\n    const isIncludsCity = gCitys.filter(_city=>_city.key===city.key)[0]\r\n    if(isIncludsCity){\r\n        //remove\r\n        _remove(city.key)\r\n        toast.success(`${city.name} deleted from favorite list`, { position: toast.POSITION.BOTTOM_LEFT })\r\n    }else{\r\n        //add\r\n        _add(city)\r\n        toast.success(`${city.name} added to favorite list`, { position: toast.POSITION.BOTTOM_LEFT })\r\n    }\r\n    storageService.saveToStorage(KEY, gCitys)\r\n    return gCitys\r\n}\r\n\r\n\r\nfunction _add(city) {\r\n    const newCity = {\r\n        _id:_makeid(),\r\n        ...city\r\n    }\r\n    gCitys = [newCity, ...gCitys]\r\n}\r\n\r\nfunction _remove(key) {\r\n    gCitys = gCitys.filter(_city=>\r\n        _city.key !== key\r\n    )\r\n}\r\n\r\n\r\nfunction _makeid(length = 7) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}","import { cityService } from '../../services/cityService'\r\nimport { loading, doneLoading } from './systemActions';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function loadFavoriteCitys() {\r\n  \r\n    return async dispatch => {\r\n        try{\r\n            dispatch(loading());\r\n            const citys = await cityService.query();\r\n            dispatch({ type: 'SET_FAVORITE_CITYS', citys })\r\n        }catch(err){\r\n            console.log('err in loading citys', err);\r\n            toast.error('Unable to loade citys', { position: toast.POSITION.BOTTOM_LEFT })\r\n        }finally{\r\n            dispatch(doneLoading());\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateFavoriteCitys(city) {\r\n  return async dispatch => {\r\n      try{\r\n        const citys = await cityService.save(city)\r\n        dispatch({ type: 'SET_FAVORITE_CITYS', citys})\r\n      }catch(err){\r\n        toast.error('Unable to update fav citys', { position: toast.POSITION.BOTTOM_LEFT })\r\n        console.log('err in updating citys', err); \r\n      }\r\n  }\r\n}\r\n\r\n\r\nexport function updateCurrCity(city) {//with geolocatin \r\n\r\n  return async dispatch => {\r\n      try{\r\n          dispatch({ type: 'SET_CURRENT_CITY', city})\r\n      }catch(err){\r\n          console.log('err in updating city', err); \r\n          toast.error('Unable to update city', { position: toast.POSITION.BOTTOM_LEFT })\r\n      }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","const API_KEY = 'jRnIo7w8ohP48d9ZfIZdGFLCzCoDYl2X'\r\n\r\nexport const weatherService = {\r\n    getAutoComplete,\r\n    getCurrentCityConditions,\r\n    getForecastFromCity,\r\n    getCurrLocation,\r\n    getHourlyFrecast\r\n}\r\n\r\nasync function getCurrLocation(status) {\r\n    const res =  fetch(\r\n        `https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${status}`\r\n    )\r\n    return res\r\n}\r\n\r\nfunction getHourlyFrecast(cityKey) {\r\n    const res =  fetch(\r\n        `https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${cityKey}?apikey=${API_KEY}&details=true&metric=true`\r\n    )\r\n    return res\r\n}\r\n\r\nasync function getForecastFromCity(cityKey) {\r\n   const res = fetch(\r\n        `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}&details=true&metric=true`\r\n    )\r\n    return res\r\n}\r\n\r\nasync function getCurrentCityConditions(cityKey) {\r\n    const res = fetch(\r\n        `https://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=${API_KEY}&details=true`\r\n    )\r\n    return res\r\n}\r\n\r\nfunction getAutoComplete(query) {\r\n    const res = fetch(\r\n        `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${query}`\r\n    )\r\n    return res\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const HeartBtnIcon = ({isActive,size}) => {\r\n\r\n    return (\r\n        <div \r\n        className={`heart ${isActive?'active':''}`}\r\n        >\r\n            <div className={`heart-flip ${size?size:''}`}></div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect,useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { HeartBtnIcon } from \"./buttons/HeartBtnIcon\";\r\n\r\nexport function CityDataPreview({favoriteCitys,cityData,getCurrentStyle,onGetCityDetails,onToggleLocation,setCitysData,inputRef}) {\r\n\r\n    const themeState = useSelector(state => state.theme.themeState); \r\n    const [isActive, setisActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const isIncludsCity = favoriteCitys.filter(_city=>_city.key===cityData.Key)[0]\r\n       if(isIncludsCity){\r\n        setisActive(true)\r\n       }else{\r\n        setisActive(false)\r\n       }\r\n    }, [cityData,favoriteCitys])\r\n\r\n    function onSetCitysData() {\r\n        onGetCityDetails(cityData)\r\n        setCitysData([])\r\n        if(inputRef&&inputRef.current){\r\n            inputRef.current.value=''\r\n        }\r\n    }\r\n\r\n    return ( \r\n    <div className={`city-data-preview flex  place-center ${getCurrentStyle(cityData.Key)}`} onClick={onSetCitysData}>\r\n       <div className={`flex search-name-result ${themeState?'dark':''}`}>\r\n            <div className='margin-right-5px'>{cityData.LocalizedName}, </div>\r\n            <div className='country'>{cityData.Country.LocalizedName}</div>\r\n       </div>\r\n        <div onClick={(e)=>{onToggleLocation(e,cityData)}}>\r\n            <HeartBtnIcon isActive={isActive} size={'small'}/>\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React, { useState,useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateFavoriteCitys,updateCurrCity } from \"../store/actions/cityActions\";\r\nimport { weatherService } from \"../services/weatherService\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { CityDataPreview } from \"./CityDataPreview\";\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function Search() {\r\n\r\n    const favoriteCitys = useSelector(state => state.city.favoriteCitys);    \r\n    const themeState = useSelector(state => state.theme.themeState); \r\n \r\n    const [citysData, setCitysData] = useState([]);\r\n    const dispatch = useDispatch()\r\n    let history = useHistory();\r\n    const inputRef = useRef()\r\n \r\n    \r\n    async function getAutoComplete(ev) {\r\n        if( ev.target.value.length===0 ){\r\n            setCitysData([]);\r\n        }\r\n        if(ev.target.value.length>2){\r\n            try {\r\n                const autoCompleteData = await weatherService.getAutoComplete(ev.target.value)\r\n                    .then (data => data.json())\r\n                    .then (data => {\r\n                        return data\r\n                    })\r\n                setCitysData(autoCompleteData)\r\n            } catch (error) {\r\n                setCitysData([]);\r\n                toast.error(\"Failed auto complete\", { position: toast.POSITION.BOTTOM_LEFT })\r\n                console.log('ERR in get citys from AutoComplete', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCurrentStyle(Key) {\r\n        if(favoriteCitys&&favoriteCitys.length>0){\r\n            const isIncludsCity = favoriteCitys.filter(city=>city.key===Key)[0]\r\n            if(isIncludsCity){\r\n                return 'includes'\r\n            }\r\n        }\r\n    }\r\n\r\n    function onToggleLocation(e,cityData) {\r\n        const data = {\r\n            name:cityData.LocalizedName,\r\n            country:cityData.Country.LocalizedName,\r\n            key:cityData.Key\r\n        }\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        dispatch(updateFavoriteCitys(data)) \r\n    }    \r\n    \r\n    function onGetCityDetails(cityData) {\r\n        const data = {\r\n            name:cityData.LocalizedName,\r\n            country:cityData.Country.LocalizedName,\r\n            key:cityData.Key\r\n        }\r\n\r\n        dispatch(updateCurrCity(data)) \r\n        history.push(`/${data.name}`)\r\n    }\r\n\r\n    return (\r\n        <div className='search flex column justify-center'>\r\n            <div className=\"search-title\">Search for city</div>\r\n            <input \r\n            className={`search-input ${themeState?'dark':''}`}\r\n            type=\"search\"  \r\n            ref={inputRef}\r\n            onChange={getAutoComplete}\r\n            placeholder='Enter at least 2 letters to start..'\r\n            onKeyDown={(e)=>{\r\n                var letters = /^[A-Za-z]+$/; \r\n                if (e.key.match(letters)) { \r\n                    return true; \r\n                } \r\n                else { \r\n                    e.preventDefault(); \r\n                } \r\n            }}\r\n            />\r\n            {citysData.length>0&&\r\n                <div className=\"city-list-wrapper\">\r\n                    <div className={`city-list ${citysData.length>0?'full':''} ${themeState?'dark':''}`}>\r\n                        <div className=\"city-list-scroll-wrapper\">\r\n                        {\r\n                             citysData.map((cityData,idx)=>\r\n                                <CityDataPreview\r\n                                key={idx} \r\n                                cityData={cityData}\r\n                                getCurrentStyle={getCurrentStyle}\r\n                                onGetCityDetails={onGetCityDetails}\r\n                                onToggleLocation={onToggleLocation}\r\n                                favoriteCitys={favoriteCitys}\r\n                                setCitysData={setCitysData}\r\n                                inputRef={inputRef}\r\n                                />\r\n                             )\r\n                        }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const Temperature = ({value,currentTextSize}) => {\r\n\r\n    const temperatureScale = useSelector(state => state.temperatureScale.temperatureScale);  \r\n\r\n    function convertToF(celsius) {\r\n        let fahrenheit = (celsius * 9/5) + 32;\r\n        return fahrenheit\r\n    }\r\n  \r\n    return (\r\n        <>\r\n            <span className='temperature-value'>\r\n                { temperatureScale==='celsius'&& Math.round(value) }\r\n                { temperatureScale==='fahrenheit'&& Math.round(convertToF(value)) }\r\n            </span> \r\n            <span className='temperature-unit'>\r\n                { temperatureScale==='celsius'&& <>&#176;</> }\r\n                { temperatureScale==='fahrenheit'&& <span className={`${currentTextSize?'':'fs-for-temp-scale'}`}>&#8457;</span> }\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n","import {RiWindyLine} from 'react-icons/ri'\r\nimport {WiHumidity} from 'react-icons/wi'\r\nimport {BiSun} from 'react-icons/bi'\r\nimport {GiDroplets} from 'react-icons/gi'\r\n\r\nexport function getWeatherIcon(weatherIcon){\r\n    switch (weatherIcon) {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        case 5:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199308/OIH57D1.eps_crop__1_-removebg-preview_g3qwv5.png\";  \r\n        case 6:\r\n        case 7:\r\n        case 8:\r\n        case 19:\r\n        case 20:\r\n        case 38:\r\n        case 43:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199333/OIH57D1.eps_crop__2_-removebg-preview_oclptj.png\";  \r\n        case 11:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199333/OIH57D1.eps_crop__2_-removebg-preview_oclptj.png\"; \r\n        case 12:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199371/OIH57D1.eps_crop__4_-removebg-preview_gnl9n6.png\"; \r\n        case 13:\r\n        case 14:\r\n        case 39:\r\n        case 40:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199391/OIH57D1.eps_crop__3_-removebg-preview_eicsqk.png\";  \r\n        case 15:\r\n        case 16:\r\n        case 17:\r\n        case 41:\r\n        case 42:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622039606/OIH57D1.eps_crop-removebg-preview_dx3n3o.png\"; \r\n        case 18:\r\n        case 25:\r\n        case 26:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199420/OIH57D1.eps_crop__5_-removebg-preview_nazxov.png\"; \r\n        case 22:\r\n        case 29:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199442/OIH57D1.eps_crop__7_-removebg-preview_ow6llf.png\"; \r\n        case 23:\r\n        case 44:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199464/OIH57D1.eps_crop__6_-removebg-preview_meirie.png\"; \r\n        case 24:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199478/OIH57D1.eps_crop__13_-removebg-preview_ilfsnl.png\";  \r\n        case 30:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199496/OIH57D1.eps_crop__12_-removebg-preview_tiqmlu.png\"; \r\n        case 31:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199496/OIH57D1.eps_crop__12_-removebg-preview_tiqmlu.png\";\r\n        case 32:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199523/OIH57D1.eps_crop__15_-removebg-preview_lw0ij6.png\"; \r\n            // return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199544/OIH57D1.eps_crop__14_-removebg-preview_wkh9ec.png\";   \r\n        case 33:\r\n        case 34:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199561/OIH57D1.eps_crop__11_-removebg-preview_ywo1lm.png\"  \r\n        case 35:\r\n        case 36:\r\n        case 37:\r\n            return \"https://res.cloudinary.com/dzvebcsrp/image/upload/v1622199575/OIH57D1.eps_crop__9_-removebg-preview_beblpw.png\";\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport function getParamImg(paramName) {\r\n    switch (true) {\r\n        case paramName.includes('UV'):\r\n            return <BiSun/>\r\n        case paramName.includes('Humidity'):\r\n           return <WiHumidity/>       \r\n        case paramName.includes('Wind'):\r\n           return <RiWindyLine/>\r\n        case paramName.includes('Precipitation'):\r\n        case paramName.includes('Liquid'):\r\n           return <GiDroplets/>\r\n        default:\r\n            break;\r\n    }\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Temperature } from \"../TemperaturePreview\";\r\nimport { getWeatherIcon } from \"../../utils/getWeatherIcons\";\r\n\r\nexport const WeatherCardPreview = ({currentCityData}) => {\r\n    \r\n    const {weatherIcon,weatherText,temperature,realFeelTemperature} = currentCityData\r\n    const themeState = useSelector(state => state.theme.themeState);  \r\n\r\n    function getWeatherIconSize() {\r\n       switch (weatherIcon) {\r\n           case 33:\r\n           case 34:\r\n           case 35:\r\n           case 36:\r\n           case 37:\r\n               return 'smaller'\r\n           default:\r\n               return ''\r\n       }\r\n    }\r\n\r\n    return (\r\n       <div className='weather-card-preview flex'>\r\n           <div className=\"weather-text bold-600 title-txt\">{weatherText}</div>\r\n           <div className=\"temperature-wrapper flex\">\r\n               <div className=\"current-temperature\">\r\n                    <Temperature value={temperature}/>\r\n               </div>\r\n               <div className=\"real-feel-temperature under-title-small-txt bold-600 \">\r\n                    <span>Feels like </span>\r\n                    <span className='real-feel-value'>\r\n                        <Temperature value={realFeelTemperature} currentTextSize={true}/>\r\n                    </span>\r\n               </div>\r\n           </div>\r\n           <div className={`weather-icon ${getWeatherIconSize()}`}>\r\n               <img src={getWeatherIcon(weatherIcon)} alt=\"\" srcSet=\"\" />   \r\n               <div className={`img-shadow ${themeState?\"dark-theme\":\"light-theme\"}`}></div>\r\n           </div>\r\n       </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateFavoriteCitys } from \"../../store/actions/cityActions\";\r\nimport { HeartBtnIcon } from \"./HeartBtnIcon\";\r\nexport const FavoriteBtn = ({currCity}) => {\r\n\r\n    const favoriteCitys = useSelector(state => state.city.favoriteCitys);    \r\n    const [isActive, setisActive] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const isIncludsCity = favoriteCitys.filter(_city=>_city.key===currCity.key)[0]\r\n       if(isIncludsCity){\r\n        setisActive(true)\r\n       }else{\r\n        setisActive(false)\r\n       }\r\n    }, [currCity,favoriteCitys])\r\n\r\n    function onUpdateFavoriteList() {\r\n         //favoriteCitys updated and updates the isActive value\r\n        dispatch(updateFavoriteCitys(currCity)) \r\n    }\r\n\r\n    return (\r\n        <div \r\n        className='favorite-btn'\r\n        onClick={onUpdateFavoriteList}\r\n        >\r\n            <div className=\"desktop-view-btn\">\r\n                <HeartButtonText isActive={isActive}/>\r\n            </div>\r\n            <div className='mobile-view-btn'>\r\n                <HeartBtnIcon isActive={isActive}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst HeartButtonText = ({isActive}) => {\r\n\r\n    return (\r\n        <div \r\n        className={`heart-button ${isActive?'active':''}`}\r\n        >\r\n            <div className=\"heart-flip\"></div>\r\n            <span>{isActive?'Added to':'Add to'} favorite</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export function getForecastDayName(day){\r\n    const d = new Date(day)\r\n    const days = [\r\n        'Sunday',\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday'\r\n    ]\r\n\r\n    const dayName = days[d.getDay()] \r\n    return dayName\r\n}\r\nexport function getForecastDate(day){\r\n    const d = new Date(day)\r\n    const date = d.getDate()\r\n    const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ]\r\n    \r\n    const monthIndex = d.getMonth()\r\n    const monthName = months[monthIndex]\r\n    const formatted = `${date} ${monthName}`\r\n    return formatted\r\n}\r\nexport function getForecastDayNameShort(day){\r\n    const d = new Date(day)\r\n    const days = [\r\n        'S',\r\n        'M',\r\n        'T',\r\n        'W',\r\n        'T',\r\n        'F',\r\n        'S'\r\n    ]\r\n\r\n    const dayName = days[d.getDay()] \r\n    return dayName\r\n}\r\nexport function getCurrentDate(){\r\n\r\n    const d = new Date()\r\n    formatDate(d)\r\n}\r\n\r\nfunction formatDate(d) {\r\n    const date = d.getDate()\r\n    const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ]\r\n    \r\n    const monthIndex = d.getMonth()\r\n    const monthName = months[monthIndex]\r\n\r\n    const days = [\r\n        'Sun',\r\n        'Mon',\r\n        'Tue',\r\n        'Wed',\r\n        'Thu',\r\n        'Fri',\r\n        'Sat'\r\n    ]\r\n\r\n    const dayName = days[d.getDay()] \r\n    const formatted = `${dayName}, ${date} ${monthName}`\r\n    return formatted\r\n}","import React from \"react\";\r\nimport {  useSelector } from \"react-redux\";\r\nimport { Temperature } from \"../TemperaturePreview\";\r\nimport {getForecastDayName, getForecastDate, getForecastDayNameShort} from \"../../utils/getCurrentDate\";\r\nimport { getWeatherIcon,getParamImg } from \"../../utils/getWeatherIcons\";\r\nimport {FaTemperatureHigh } from \"react-icons/fa\";\r\n\r\nexport const ForecastPreview = ({dailyForecast}) => {\r\n    const themeState = useSelector(state => state.theme.themeState); \r\n\r\n    return (\r\n        <div className={`card-type-2 ${themeState?'':'light-theme'} day-forecast-preview`} >\r\n\r\n            <div className='desktop'>\r\n                <div className='flex column place-center'>\r\n                    <div className='flex column place-center'>\r\n                        <div className={`flex column place-center ${themeState?'lightClr':''}`}>\r\n                            <div className='title-txt'>\r\n                                {getForecastDayName(dailyForecast.Date)}\r\n                            </div>\r\n                            <div className='fs11'>\r\n                                {getForecastDate(dailyForecast.Date)}\r\n                            </div>\r\n                        </div>\r\n                        <div className='day-icon'>\r\n                            <img src={getWeatherIcon(dailyForecast.Day.Icon)} alt=\"\" srcSet=\"\" />   \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div  \r\n                className={`weather-text title-txt text-center ${themeState?'lightClr':''}`} >\r\n                    {dailyForecast.Day.ShortPhrase}\r\n                </div>\r\n                <div className=\"flex width-full space-evenly\">\r\n                    <div className='day-temperature max bold-700 fs30'>\r\n                        <Temperature currentTextSize={true} value={dailyForecast.Temperature.Maximum.Value}/>\r\n                    </div>\r\n                    <div className='day-temperature min bold-700 fs30'>\r\n                        <Temperature currentTextSize={true} value={dailyForecast.Temperature.Minimum.Value}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"temperature-params forecast\">\r\n                    <div>\r\n                        <span className='clr6 margin-right-5px'>\r\n                            <span className=\"margin-right-5px\">{ getParamImg('UV')}</span>\r\n                            <span>UV:</span>\r\n                        </span>\r\n                        <span className={`${themeState?'clr4':'clr6'} `}>{dailyForecast.AirAndPollen[5].Value}/10</span>\r\n                    </div>\r\n                    <div>\r\n                        <span className='clr6 margin-right-5px'>\r\n                            <span className=\"margin-right-5px\">{ getParamImg('Wind')}</span>\r\n                            <span>Wind:</span>\r\n                        </span>\r\n                        <span className={`${themeState?'clr4':'clr6'} `}>{dailyForecast.Day.WindGust.Speed.Value} km/h</span>\r\n                    </div>\r\n                    <div>\r\n                        <span className='clr6 margin-right-5px'>\r\n                            <span className=\"margin-right-5px\"><FaTemperatureHigh/></span><span>Real Feel:</span>\r\n                        </span>\r\n                        <span className={`${themeState?'clr4':'clr6'} `}> \r\n                            <Temperature currentTextSize={true} value={dailyForecast.RealFeelTemperature.Maximum.Value}/>\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        <span className='clr6 margin-right-5px'>\r\n                            <span className=\"margin-right-5px\">{ getParamImg('Liquid')}</span>\r\n                            <span>Total Liquid:</span>\r\n                        </span>\r\n                        <span className={`${themeState?'clr4':'clr6'} `}>{dailyForecast.Day.TotalLiquid.Value} mm</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='mobile flex column place-center justify-center'>\r\n                <div className='day-letter'>{getForecastDayNameShort(dailyForecast.Date)}</div>\r\n                <div className='day-icon'>\r\n                    <img src={getWeatherIcon(dailyForecast.Day.Icon)} alt=\"\" srcSet=\"\" />   \r\n                </div>\r\n                <div className='day-temperature bold-700'>\r\n                    <Temperature value={dailyForecast.Temperature.Maximum.Value} currentTextSize={true}/>\r\n                </div>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { ForecastPreview } from \"./ForecastPreview\";\r\n\r\nexport const ForecastList = ({dailyForecastsData}) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bold-700 title-txt\">Next 5 Days</div>\r\n            <div className='daily-forecasts'>\r\n                {\r\n                    dailyForecastsData.map( (dailyForecast,idx)=> \r\n                        <ForecastPreview key={idx} day={'M'} dailyForecast={dailyForecast}/>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { toast } from 'react-toastify';\r\n\r\nexport function updateTemperatureScale(temperatureScale) {\r\n  return async dispatch => {\r\n      try{\r\n          dispatch({ type: 'SET_SCALE', temperatureScale})\r\n      }catch(err){\r\n          console.log('err in updating temperature scale', err); \r\n          toast.error('Unable to update temperature scale', { position: toast.POSITION.BOTTOM_LEFT })\r\n      }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateTemperatureScale } from \"../../store/actions/temperatureScaleActions\";\r\n\r\nexport function TemperatureConversionBtn() {\r\n\r\n    const temperatureScale = useSelector(state => state.temperatureScale.temperatureScale);  \r\n    const themeState = useSelector(state => state.theme.themeState);  \r\n    const dispatch = useDispatch()\r\n\r\n    function onUpdateTemperatureScale() {\r\n        if(temperatureScale==='celsius'){\r\n            dispatch(updateTemperatureScale('fahrenheit'))\r\n        }else{\r\n            dispatch(updateTemperatureScale('celsius'))\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"conversion-btn-wrapper width-full flex\">\r\n            <input \r\n            type=\"checkbox\" \r\n            className={`temperature-conversion-btn ${themeState?'dark':''}`}\r\n            onChange={onUpdateTemperatureScale}\r\n            checked={temperatureScale!=='celsius'?true:false}\r\n            >   \r\n            </input>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Loader() {\r\n    return(\r\n        <div className=\"loading-wrapper\">\r\n            <div className=\"loading-text\">LOADING</div>\r\n            <div className=\"loading-content\"></div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentDate } from '../../utils/getCurrentDate'\r\n\r\nexport const Location = () => {\r\n\r\n    const currCity = useSelector(state => state.city.currCity);\r\n    return (\r\n        <div className=\"location flex column\">\r\n            <div className='city bold-800 title-txt'>{currCity.name},</div>\r\n            <div className='country bold-800 title-txt'>{currCity.country}</div>\r\n            <div className='date under-title-small-txt'>{getCurrentDate()}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getParamImg } from \"../../utils/getWeatherIcons\";\r\n\r\nexport const TemperatureParam = ({param}) => {\r\n    const themeState = useSelector(state => state.theme.themeState); \r\n    return (\r\n        <div className=\"temperature-param flex column\">\r\n            <div className={`card-type-2 flex place-center justify-center ${themeState?'dark-theme':''} temperature-value `}>\r\n                <div className='icon mobile flex place-center justify-center'>\r\n                   { getParamImg(param.name)}\r\n                </div>\r\n            </div>\r\n            <div className={`fs12 bold-700 ${themeState?'dark-theme':''}`}>{param.value}{param.unit}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getParamImg } from \"../utils/getWeatherIcons\";\r\n\r\nexport function CircularProgressBar({param}) {\r\n\r\n    const themeState = useSelector(state => state.theme.themeState);  \r\n\r\n    function getParamValue() {\r\n        switch (true) {\r\n            case param.name.includes('UV'):\r\n                return  param.value*10\r\n            case param.name.includes('Humidity'):\r\n               return param.value       \r\n            case param.name.includes('Wind'):\r\n                return param.value       \r\n            case param.name.includes('Precipitation'):\r\n                return param.value       \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"param-progress-bar width-fit flex column place-center\">\r\n            <div className=\"title-text flex\"><div className='margin-right-7px'>{param.name}</div><div className=\"fs18\">{getParamImg(param.name)}</div></div>\r\n            <div className={`progress-circle ${getParamValue()>50?'over50':''}  p${getParamValue()} ${themeState?'dark':''}`}>\r\n                <div className={`flex ${param.txt?'column':''}`}>\r\n                    <span>{param.value}{param.unit}</span>\r\n                </div>\r\n                <div className=\"left-half-clipper\">\r\n                   <div className=\"first50-bar\"></div>\r\n                   <div className=\"value-bar\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { CircularProgressBar } from \"../CircularProgressBar\";\r\n\r\nexport const TemperatureParamDesktop = ({currentCityData}) => { \r\n    return (\r\n        <div className='temperatureParams-desktop-wrapper flex'>\r\n        {currentCityData.temperatureParams.map((param, idx)=>\r\n            <CircularProgressBar key={idx} param={param}/>\r\n        )}\r\n       </div>\r\n    )\r\n}","export function formatAMPM(val) {\r\n    var date = new Date(val)\r\n    var hours = date.getHours();\r\n    var minutes = date.getMinutes();\r\n    var ampm = hours >= 12 ? 'pm' : 'am';\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12; // the hour '0' should be '12'\r\n    minutes = minutes < 10 ? '0'+minutes : minutes;\r\n    var strTime = hours + ':' + minutes + ' ' + ampm;\r\n    return strTime;\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { formatAMPM } from \"../../utils/formatAMPM\"\r\nimport { getWeatherIcon } from \"../../utils/getWeatherIcons\";\r\nimport { Temperature } from \"../TemperaturePreview\";\r\n\r\nexport const HourlyForecast = ({hourlyForecastData}) => { \r\n    const themeState = useSelector(state => state.theme.themeState);  \r\n    return (\r\n        <div className='hourly-forecast-wrapper'>\r\n            <div className=\"bold-700 title-txt margin-bottom-10px\">Today</div>\r\n                <div className={`grid hourly-forecast-list width-full space-between ${themeState?'dark':''}`}>\r\n                {\r\n                    hourlyForecastData.map(\r\n                        (hourDate,idx) =>\r\n                        <div key={idx} className={`flex column place-center hourly-forecast-preview ${themeState?'dark':''}`}>\r\n                           <div className=\"clr2\">{formatAMPM(hourDate.DateTime)}</div>\r\n                           <div className='icon-img flex place-center justify-center'>\r\n                                <img src={getWeatherIcon(hourDate.WeatherIcon)} alt=\"\" srcSet=\"\" />   \r\n                            </div>\r\n                            <div className=\"flex place-baseline\">\r\n                                <div className=\"title-txt margin-right-5px\">\r\n                                    <Temperature currentTextSize={true} value={hourDate.Temperature.Value}/>\r\n                                    </div>\r\n                                <div className=\"fs11\">\r\n                                    <Temperature currentTextSize={true} value={hourDate.RealFeelTemperature.Value}/>\r\n                                </div>\r\n                            </div>\r\n                           <div className={`text-center word-break ${themeState?'clr4':'clr6'}`}>{hourDate.IconPhrase}</div>\r\n                        </div>\r\n                    )\r\n                }\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import { storageService } from \"./storageService\"\r\n\r\nconst KEY = 'THEME_STATE';\r\nlet gThemeState;\r\n\r\nexport const themeService = {\r\n    query,\r\n    save\r\n}\r\n\r\nasync function query() {\r\n    gThemeState = await storageService.loadFromStorage(KEY)\r\n    if(!gThemeState){\r\n        gThemeState = false\r\n        storageService.saveToStorage(KEY, gThemeState)\r\n    }\r\n    return gThemeState\r\n}\r\n\r\n\r\nfunction save(newThemeState) {\r\n    gThemeState = newThemeState\r\n    storageService.saveToStorage(KEY, gThemeState)\r\n}\r\n\r\n","import React, { useEffect,useState,useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Temperature } from \"./TemperaturePreview\";\r\nimport { updateCurrCity,updateFavoriteCitys } from \"../store/actions/cityActions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { weatherService } from \"../services/weatherService\";\r\nimport { BsThreeDots,BsTrash } from \"react-icons/bs\";\r\nimport { getWeatherIcon } from \"../utils/getWeatherIcons\";\r\nimport { toast } from 'react-toastify';\r\nimport { Loader } from \"../cmps/Loader\";\r\n\r\nexport const FavoritePreview = ({city}) => {\r\n\r\n    const themeState = useSelector(state => state.theme.themeState); \r\n    const [cityData, setCityData] = useState(null)\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const dispatch = useDispatch()\r\n    let history = useHistory();\r\n    const modalRef = useRef()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            async function fetchCurrentCityConditions() {   \r\n                const response = await weatherService.getCurrentCityConditions(city.key).then (data => data.json()).then (data => {\r\n                    return data[0]\r\n                })\r\n                if(response){\r\n                    const currData = {\r\n                        temperature:response.Temperature.Metric.Value,\r\n                        realFeelTemperature:response.RealFeelTemperature.Metric.Value,\r\n                        weatherText:response.WeatherText,\r\n                        weatherIcon:response.WeatherIcon,\r\n                        temperatureParams:[\r\n                            {\r\n                                name:'UV',\r\n                                value:response.UVIndex,\r\n                                unit: '/10'\r\n                            },\r\n                            {\r\n                                name:'Humidity',\r\n                                value: response.RelativeHumidity,\r\n                                unit: '%'\r\n                            },\r\n                            {\r\n                                name:'Wind Gust',\r\n                                value:response.WindGust.Speed.Metric.Value,\r\n                                unit: 'km/h'\r\n                            }\r\n                        ]\r\n                    } \r\n                    setCityData(currData)\r\n                }\r\n            }\r\n            fetchCurrentCityConditions();\r\n        } catch (error) {\r\n            toast.error(\"Failed getting current conditions\", { position: toast.POSITION.BOTTOM_LEFT })\r\n            console.log('ERR in getting fav city conditions', error);\r\n        }\r\n    }, [city.key])\r\n\r\n    const onUpdateCurrCity = () => {\r\n        dispatch(updateCurrCity(city))\r\n        history.push(`/${city.name}`)\r\n    }\r\n\r\n    function onRemoveLocation(e) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        dispatch(updateFavoriteCitys(city)) \r\n        setIsOpen(false)\r\n    }\r\n\r\n    function onOpenModal() {\r\n        setIsOpen(p=>!p)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isOpen){\r\n            if(modalRef&&modalRef.current){\r\n                modalRef.current.focus()\r\n            }\r\n        }\r\n    }, [isOpen])\r\n\r\n    if(!cityData)return <Loader/>\r\n    return (\r\n        <div className='weather-card-preview favorite flex column' onClick={onUpdateCurrCity}>\r\n            <div className=\"position-relative options-container\" >\r\n                <div className={`options-btn-wrapper flex place-center ${isOpen?'active':''}`} onClick={(e)=>{\r\n                        e.preventDefault()\r\n                        e.stopPropagation()\r\n                        onOpenModal()\r\n                    }} >\r\n                    <BsThreeDots/>\r\n                </div>\r\n                {isOpen&&<div \r\n                className=\"modal\" \r\n                tabIndex=\"0\" ref={modalRef} \r\n                onBlur={()=> setIsOpen(false)} \r\n                >\r\n                    <div onClick={(e)=>onRemoveLocation(e)} className=\"delete-btn flex place-center\"><div className='margin-right-5px'>Delete</div><BsTrash/></div>\r\n                </div>}\r\n            </div>\r\n            <div className='flex space-between width-full'>\r\n                <div className={`flex column favorite-location ${themeState?'dark':''}`}>\r\n                    <div className='title-txt bold-600 space-nowrap'>{city.name},</div>\r\n                    <div>{city.country}</div>\r\n                </div>\r\n                <div className=\"weather-icon-favorite\">\r\n                    <img src={getWeatherIcon(cityData.weatherIcon)} alt=\"\" srcSet=\"\" />   \r\n                    <div className={`img-shadow-favorite ${themeState?\"dark-theme\":\"light-theme\"}`}></div>\r\n                </div>\r\n            </div>\r\n            <div className='flex space-between width-full margin-t-20'>\r\n                <div className={`curr-favorite-location-params flex`}>\r\n                    {cityData.temperatureParams.map((param, idx)=>\r\n                        <div key={idx} className='flex column param-wrapper justify-center'>\r\n                            <div className='text-center fs14'>{param.name}</div>\r\n                            <div className='text-center fs11'>{param.value}{param.unit}</div>\r\n                        </div>\r\n                    )} \r\n                </div>\r\n                <div className='fs40 bold-700 favorite-temperature'><Temperature value={cityData.temperature}/></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { FavoritePreview } from \"./FavoritePreview\"\r\n\r\nexport const FavoriteList = ({favoriteCitys}) => {\r\n\r\n    return (\r\n       <div className=\"favorite-list inner-container \">\r\n           {favoriteCitys.map((city,idx)=>\r\n                <FavoritePreview key={idx} city={city}/>\r\n            )}\r\n       </div>\r\n    )\r\n}","import { WeatherDetails } from './pages/WeatherDetails.jsx'\r\nimport { FavoriteCitys } from './pages/FavoriteCitys.jsx'\r\n\r\n\r\nexport const routes=[\r\n  {\r\n    path: '/favorite',\r\n    component: FavoriteCitys,\r\n  },\r\n  {\r\n    path: '/:id',\r\n    component: WeatherDetails,\r\n  }\r\n]\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { FavoriteList } from \"../cmps/FavoriteList\";\r\n\r\nexport const FavoriteCitys = () => {\r\n\r\n    const favoriteCitys = useSelector(state => state.city.favoriteCitys);    \r\n\r\n    return (\r\n        <div className='favorite-page flex place-center column'>\r\n            <div className=\"title bold-800 title-txt margin-bottom-30px\">Favorite Locations</div>\r\n            {\r\n               favoriteCitys.length>0?\r\n               <FavoriteList favoriteCitys={favoriteCitys}/>\r\n               : \r\n               <div className=\" bold-700 title-txt\">No favorite citys</div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect,useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Search } from \"../cmps/Search\";\r\nimport { WeatherCardPreview } from \"../cmps/weather-details-cmps/WeatherCardPreview\";\r\nimport { FavoriteBtn } from \"../cmps/buttons/FavoriteBtn\";\r\nimport { ForecastList } from \"../cmps/weather-details-cmps/ForecastList\";\r\nimport { weatherService } from \"../services/weatherService\";\r\nimport { TemperatureConversionBtn } from \"../cmps/buttons/TemperatureConversionBtn\";\r\nimport { toast } from 'react-toastify';\r\nimport { Loader } from \"../cmps/Loader\";\r\nimport { Location } from \"../cmps/weather-details-cmps/Location\";\r\nimport { TemperatureParam } from \"../cmps/weather-details-cmps/TemperatureParam\";\r\nimport { TemperatureParamDesktop } from \"../cmps/weather-details-cmps/TemperatureParamDesktop\";\r\nimport { HourlyForecast } from \"../cmps/weather-details-cmps/HourlyForecast\";\r\n\r\nexport const WeatherDetails = () => {\r\n \r\n    const currCity = useSelector(state => state.city.currCity);\r\n\r\n    const [currentCityData, setCurrentCityData] = useState(null)\r\n    const [dailyForecastsData, setDailyForecastsData] = useState([])\r\n    const [hourlyForecastData, setHourlyForecatsData] = useState([])\r\n\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        if(currCity){\r\n            try {\r\n                async function fetchCurrentCityConditions() {    \r\n                    const response = await weatherService.getCurrentCityConditions(currCity.key).then (data => data.json()).then (data => {\r\n                        return data[0]\r\n                    })  \r\n                    let cityData\r\n                    if(response){\r\n                        cityData = {\r\n                            weatherText:response.WeatherText,\r\n                            weatherIcon:response.WeatherIcon,\r\n                            temperature:response.Temperature.Metric.Value,\r\n                            realFeelTemperature:response.RealFeelTemperature.Metric.Value,\r\n                            temperatureParams:[\r\n                                {\r\n                                    name:'UV Index',\r\n                                    value:response.UVIndex,\r\n                                    unit: '/10',\r\n                                    txt:response.UVIndexText\r\n                                },\r\n                                {\r\n                                    name:'Humidity',\r\n                                    value: response.RelativeHumidity,\r\n                                    unit: '%'\r\n                                },\r\n                                {\r\n                                    name:'Wind Gust',\r\n                                    value:response.WindGust.Speed.Metric.Value,\r\n                                    unit: 'km/h'\r\n                                },\r\n                                {\r\n                                    name:'Precipitation',\r\n                                    value:response.PrecipitationSummary.Precipitation.Metric.Value,\r\n                                    unit: response.PrecipitationSummary.Precipitation.Metric.Unit\r\n                                }\r\n                            ]\r\n                        };\r\n                    }             \r\n                    setCurrentCityData(cityData)\r\n                }\r\n                fetchCurrentCityConditions();\r\n            } catch (error) {\r\n                toast.error(\"Failed to fetch current conditions\", { position: toast.POSITION.BOTTOM_LEFT })\r\n                console.log('ERR in getting current city conditions', error);\r\n            }\r\n\r\n            try {\r\n                async function fetchDailyForecast() {                   \r\n                    const response = await weatherService.getForecastFromCity(currCity.key).then (data => data.json()).then (data => {\r\n                       return data.DailyForecasts\r\n                    })\r\n                    setDailyForecastsData(response)\r\n               }\r\n               fetchDailyForecast(); \r\n            } catch (error) {\r\n                toast.error(\"Failed to fetch daily forecast\", { position: toast.POSITION.BOTTOM_LEFT })\r\n                console.log('ERR in getting daily forecast', error);\r\n            }\r\n\r\n            try {\r\n                async function fetchHourlyForecast() {                   \r\n                    const response = await weatherService.getHourlyFrecast(currCity.key).then (data => data.json()).then (data => {\r\n                        return data\r\n                     })\r\n                    setHourlyForecatsData(response)\r\n                }\r\n                fetchHourlyForecast(); \r\n            } catch (error) {\r\n                toast.error(\"Failed to fetch hourly forecast\", { position: toast.POSITION.BOTTOM_LEFT })\r\n                console.log('ERR in getting hourly forecast', error);\r\n            }\r\n        }\r\n        return () => {\r\n            setCurrentCityData(null)\r\n            setDailyForecastsData([])\r\n            setHourlyForecatsData([])\r\n        }\r\n    }, [currCity,location.pathname]); \r\n\r\n    \r\n\r\n    if(!currCity||!currentCityData||dailyForecastsData.length===0||hourlyForecastData.length===0) return <Loader/>\r\n    return (\r\n       <div className=\"weather-details\">\r\n            <div className=\"desktop-search\"><Search/></div>\r\n\r\n            <div className=\"inner-container\">\r\n                <div className='current-details-section'>\r\n\r\n                    <div className='flex space-between full'>\r\n                        <Location/>\r\n\r\n                        <TemperatureParamDesktop currentCityData={currentCityData}/>\r\n\r\n                        <FavoriteBtn currCity={currCity}/>\r\n                    </div>\r\n                    <div className=\"current-conditions-container\">\r\n                        <WeatherCardPreview\r\n                        currentCityData={currentCityData}\r\n                        />\r\n\r\n                    {currentCityData.temperatureParams&&\r\n                       <div className=\"flex space-evenly temperature-params\">\r\n                           {currentCityData.temperatureParams.map((param, idx)=>\r\n                                <TemperatureParam key={idx} param={param}/>\r\n                            )}\r\n                       </div>\r\n                    }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <TemperatureConversionBtn/>\r\n                \r\n                <HourlyForecast hourlyForecastData={hourlyForecastData}/>\r\n                \r\n                <ForecastList dailyForecastsData={dailyForecastsData}/>\r\n                \r\n            </div>\r\n       </div>\r\n    )\r\n}\r\n","import { themeService } from '../../services/themeService'\r\nimport { loading, doneLoading } from './systemActions';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport function loadTheme() {\r\n    return async dispatch => {\r\n        try{\r\n            dispatch(loading());\r\n            const themeState = await themeService.query();\r\n            dispatch({ type: 'SET_THEME', themeState })\r\n        }catch(err){\r\n            console.log('err in loading theme', err);\r\n            toast.error('Unable to load  theme background color status', { position: toast.POSITION.BOTTOM_LEFT })\r\n        }finally{\r\n            dispatch(doneLoading());\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateTheme(themeState) {\r\n\r\n  return async dispatch => {\r\n      try{\r\n          await themeService.save(themeState)\r\n          dispatch({ type: 'SET_THEME', themeState})\r\n      }catch(err){\r\n          console.log('err in updating theme', err); \r\n          toast.error('Unable to update theme background color', { position: toast.POSITION.BOTTOM_LEFT })\r\n      }\r\n  }\r\n}\r\n","export function loading() {\r\n  return { type: 'LOADING_START' }\r\n}\r\nexport function doneLoading() {\r\n  return { type: 'LOADING_DONE' }\r\n}","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadTheme, updateTheme } from \"../../store/actions/themeActions\";\r\n\r\nexport function ThemeToggleBtn() {\r\n\r\n    const themeState = useSelector(state => state.theme.themeState);  \r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        dispatch(loadTheme())\r\n    }, [dispatch])\r\n\r\n  \r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"toggle\">\r\n\r\n                <input \r\n                className=\"toggle-input\" \r\n                type=\"checkbox\" \r\n                checked={themeState}\r\n                onChange={()=>{\r\n                    dispatch(updateTheme(!themeState))\r\n                }}\r\n                />\r\n\r\n                <div className='toggle-bg'></div>\r\n                <div className=\"toggle-switch \">\r\n                    {themeState?\r\n                        <img className='dark' src=\"https://img.icons8.com/office/25/000000/moon.png\" alt=''/>\r\n                        :\r\n                        <img className='light' src=\"https://img.icons8.com/emoji/35/000000/sun-behind-small-cloud.png\" alt=''/>\r\n                    }\r\n                </div>  \r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const NavbarDesktopBtn = ({innerText,pathName}) => {\r\n\r\n    const themeState = useSelector(state => state.theme.themeState);\r\n\r\n    return (\r\n        <NavLink \r\n        className={`\r\n        navlink-btn \r\n        desktop-view \r\n        margin-right-7px \r\n        ${themeState?'dark':''} \r\n        `} \r\n        to={pathName}>\r\n            {innerText}\r\n            <span></span><span></span><span></span><span></span>\r\n        </NavLink>\r\n    )\r\n}\r\n","import React, { useEffect,useState } from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport { ThemeToggleBtn } from \"./buttons/ThemeToggleBtn\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"./Loader\";\r\nimport { NavbarDesktopBtn } from \"./buttons/NavbarDesktopBtn\";\r\n\r\nexport const Navbar = () => {\r\n\r\n    const currCity = useSelector(state => state.city.currCity); //key\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    useEffect(() => {\r\n      window.onscroll = () => {\r\n        setOffset(window.pageYOffset)\r\n      }\r\n    }, []);\r\n  \r\n    if(!currCity) return <Loader/>\r\n    return (\r\n        <div className={`navbar ${offset>0?'scroll':''}`}>\r\n            <div className='inner-navbar-container flex space-between'>\r\n                <NavLink className='logo-wrapper flex place-center' to={`/${currCity.name}`}>\r\n                    <span> Weather app </span>\r\n                </NavLink>\r\n\r\n                <div className={`flex place-center`}>\r\n                    <NavbarDesktopBtn innerText={'home'} pathName={`/${currCity.name}`}/>\r\n                    <NavbarDesktopBtn innerText={'favorite'} pathName={'/favorite'}/>\r\n                    <ThemeToggleBtn/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport { VscHome, VscHeart } from \"react-icons/vsc\";\r\nimport { Loader } from \"./Loader\";\r\n\r\nexport const MobileNavbar = () => {\r\n    const themeState = useSelector(state => state.theme.themeState); \r\n    const currCity = useSelector(state => state.city.currCity);\r\n\r\n    if(!currCity) return <Loader/>\r\n    return (\r\n        <div className={`mobile-navbar ${themeState?'dark-theme':''}`}>\r\n            <div className='flex space-around place-center inner-navbar-container'>\r\n                <NavLink className={`navlink-btn flex place-center`} to={`/${currCity.name}`}>\r\n                    <VscHome/>\r\n                </NavLink>\r\n                <NavLink className={`navlink-btn flex place-center`} to=\"/favorite\">\r\n                    <VscHeart/>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from \"react\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { Switch, Route } from 'react-router-dom';\nimport {routes} from './routes.js'\nimport { Navbar } from './cmps/Navbar'\nimport { MobileNavbar } from './cmps/MobileNavbar'\nimport { loadTheme } from \"./store/actions/themeActions\";\nimport { loadFavoriteCitys,updateCurrCity } from \"./store/actions/cityActions\";\nimport { toast } from 'react-toastify';\nimport { useHistory } from \"react-router-dom\";\nimport { weatherService } from \"./services/weatherService\";\n\nexport function App() {\n\n  const themeState = useSelector(state => state.theme.themeState);  \n  const currCity = useSelector(state => state.city.currCity);\n  let history = useHistory();\n  const dispatch = useDispatch()\n  const location = useLocation();\n\n  useEffect(() => {\n      dispatch(loadTheme())\n  }, [dispatch])\n\n  useEffect(() => {\n    dispatch(loadFavoriteCitys())\n  }, [dispatch])\n\n  useEffect(() => {\n    if(location.pathname === '/'&&currCity){\n      history.push(`/${currCity.name}`)\n    }\n  }, [currCity,location.pathname,history])\n\n  useEffect(() => {\n    if(!currCity){\n        function success(position) {\n            const latitude  = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            getLocation(`${latitude},${longitude}`)\n        }\n      \n        function error() {\n            toast.error('Unable to retrieve your location', { position: toast.POSITION.BOTTOM_LEFT })\n            getDefaultCity()\n        }\n      \n        if(!navigator.geolocation) {\n          toast.error('Geolocation is not supported by your browser', { position: toast.POSITION.BOTTOM_LEFT })\n          getDefaultCity()\n        } else {\n          navigator.geolocation.getCurrentPosition(success, error);\n        }\n      \n    }\n    function getDefaultCity() {\n      const defaultCity = {\n        _id:'2154402',\n        name:'Tel Aviv',\n        country:'Israel',\n        key:2154402\n      }\n      dispatch(updateCurrCity(defaultCity))\n      if(location.pathname !== '/favorite'){\n          history.push(`/${defaultCity.name}`)\n      }\n    }\n    function getLocation(status) {\n        async function fetchCurrentLocation() {\n            const response = await weatherService.getCurrLocation(status).then(data => data.json()).then(data => {\n                return data\n            })    \n            const city  =  {\n                _id: `${response.Key}`,\n                name:response.LocalizedName,\n                key:parseInt(response.Key),\n                country:response.Country.LocalizedName\n            }\n            dispatch(updateCurrCity(city))\n            if(location.pathname !== '/favorite'){\n              history.push(`/${city.name}`)     \n            }\n        }\n        fetchCurrentLocation()\n    }\n  }, [currCity,history,location.pathname,dispatch])\n\n  return (\n    <div className={`App ${themeState?location.pathname === '/favorite'?'dark-desktop-favorite-page-view':'dark':location.pathname === '/favorite'?'light-desktop-favorite-page-view':'light'}`}>\n      <Navbar/>\n      <Switch>\n        { routes.map(route => <Route key={ route.path } exact component={ route.component } path={ route.path } />) }\n      </Switch>\n      <MobileNavbar/>\n      <ToastContainer />\n    </div>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router } from 'react-router-dom'\nimport { store } from './store/store'\nimport { App } from './App.jsx'\nimport './assets/styles/global.scss'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}